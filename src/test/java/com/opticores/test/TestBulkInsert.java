package com.opticores.test;

import java.io.File;
import java.io.FileNotFoundException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Scanner;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.junit.Ignore;
import org.junit.Test;

import com.opticores.model.Word;
import com.opticores.model.Words;
import com.opticores.util.HibernateUtil;

public class TestBulkInsert extends BaseTest {

	/**
	 * @throws FileNotFoundException
	 */
	@Ignore
	public void hibernateSequentialInsertWithAutoGeneratedId()
			throws FileNotFoundException {

		Scanner scanner = new Scanner(new File("words.txt"));
		Session session = HibernateUtil.getSession();
		Transaction tx = session.beginTransaction();
		Words words;
		long start = System.currentTimeMillis();
		while (scanner.hasNextLine()) {
			words = new Words();
			words.setWord(scanner.nextLine());
			session.save(words);
		}
		tx.commit();
		long end = System.currentTimeMillis();
		System.out
				.println("'Hibernate 'SEQUENTIAL' inserts with auto generated ID:' time in inserting 350K records in seconds---- "
						+ (end - start) / 1000.00);
		

		session = HibernateUtil.getSession();
		tx = session.beginTransaction();
		Query nativeQuery = session.createSQLQuery("truncate words");
		nativeQuery.executeUpdate();
		tx.commit();
		scanner.close();
	}

	/**
	 * @throws FileNotFoundException
	 */
	@Ignore
	public void hibernateSequentialInsertWithProgramGeneratedId()
			throws FileNotFoundException {

		Scanner scanner = new Scanner(new File("words.txt"));
		Session session = HibernateUtil.getSession();
		Transaction tx = session.beginTransaction();
		Word word;
		int i = 0;
		long start = System.currentTimeMillis();
		while (scanner.hasNextLine()) {
			word = new Word();
			word.setId(++i);
			word.setWord(scanner.nextLine());
			session.save(word);
		}
		tx.commit();
		long end = System.currentTimeMillis();
		System.out
				.println("'Hibernate 'SEQUENTIAL' inserts with program generated ID for primary key:' time in inserting 350K records in seconds: "
						+ (end - start) / 1000.00);
		

		session = HibernateUtil.getSession();
		tx = session.beginTransaction();
		Query nativeQuery = session.createSQLQuery("truncate words");
		nativeQuery.executeUpdate();
		tx.commit();
		scanner.close();
	}

	/**
	 * @throws FileNotFoundException
	 */
	@Ignore
	public void hibernateBulkInsertWithGeneratedId()
			throws FileNotFoundException {

		Scanner scanner = new Scanner(new File("words.txt"));
		Session session = HibernateUtil.getSession();
		Transaction tx = session.beginTransaction();
		Word words;
		int i = 0;
		long start = System.currentTimeMillis();
		while (scanner.hasNextLine()) {
			words = new Word();
			words.setId(++i);
			words.setWord(scanner.nextLine());
			session.save(words);
			if (i % 50 == 0) {
				session.flush();
				session.clear();
			}
		}
		tx.commit();

		long end = System.currentTimeMillis();
		System.out
				.println("'Hibernate 'BATCH(50)' inserts: ' time in inserting 350K records in seconds---- "
						+ (end - start) / 1000.00);
		
		session = HibernateUtil.getSession();
		tx = session.beginTransaction();
		Query nativeQuery = session.createSQLQuery("truncate words");
		nativeQuery.executeUpdate();
		tx.commit();
		scanner.close();
	}

	/**
	 * This function performs a bulk insert in 'words' table and after inserting
	 * removes all the data from the table
	 * 
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 * @throws FileNotFoundException
	 */
	@Ignore
	public void bulkInsertWithPlainJDBC() throws ClassNotFoundException,
			SQLException, FileNotFoundException {

		Connection connection = getConnection();
		connection.setAutoCommit(Boolean.FALSE);

		String insertQuery = "insert into words (id,word) values(?,?)";
		Scanner scanner = new Scanner(new File("words.txt"));

		PreparedStatement statement = connection.prepareStatement(insertQuery);
		int i = 0;
		int batchSize = 50;
		long start = System.currentTimeMillis();
		while (scanner.hasNextLine()) {
			statement.setInt(1, ++i);
			statement.setString(2, scanner.nextLine());
			statement.addBatch();
			if (i % batchSize == 0) {
				statement.executeBatch();
			}

		}
		statement.executeBatch();
		connection.commit();
		long end = System.currentTimeMillis();
		System.out
				.println("'JDBC BATCH(50) inserts:' time in inserting 350K records in seconds---- "
						+ (end - start) / 1000.00);
		// Remove all the inserts
		statement = removeInserts(connection);
		statement.close();
		connection.close();

		scanner.close();

	}

	/**
	 * This function performs a sequential insert in 'words' table and after
	 * inserting removes all the data from the table
	 * 
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 * @throws FileNotFoundException
	 */
	@Test
	public void sequentialInsertWithPlainJDBC() throws ClassNotFoundException,
			SQLException, FileNotFoundException {

		// Using scanner to read file 'words.txt'
		Scanner scanner = new Scanner(new File("words.txt"));

		Connection connection = getConnection();
		connection.setAutoCommit(Boolean.FALSE);

		final String INSERT_QUERY = "insert into words (id,word) values(?,?)";

		PreparedStatement statement = connection.prepareStatement(INSERT_QUERY);
		int i = 0;
		long start = System.currentTimeMillis();
		while (scanner.hasNextLine()) {
			statement.setInt(1, ++i);
			statement.setString(2, scanner.nextLine());
			statement.executeUpdate();
		}
		connection.commit();
		long end = System.currentTimeMillis();
		System.out
				.println("'JDBC Sequential inserts :' time in inserting 350K records in seconds---- "
						+ (end - start) / 1000.00);
		// Remove all the inserts
		statement = removeInserts(connection);

		statement.close();
		connection.close();

		scanner.close();

	}

	private PreparedStatement removeInserts(Connection connection)
			throws SQLException {
		PreparedStatement statement;
		// Delete all records so that table 'words' is in state before the test
		// started
		final String DELETE_QUERY = "truncate words";
		statement = connection.prepareStatement(DELETE_QUERY);
		statement.executeUpdate();
		return statement;
	}

	private Connection getConnection() throws ClassNotFoundException,
			SQLException {
		Class.forName("com.mysql.jdbc.Driver");
		Connection connection = DriverManager
				.getConnection(
						"jdbc:mysql://localhost:3306/hibernate?rewriteBatchedStatements=false",
						"root", "anubhav");
		return connection;
	}

}
